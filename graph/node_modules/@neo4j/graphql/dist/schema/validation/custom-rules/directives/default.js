"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.verifyDefault = verifyDefault;
const graphql_1 = require("graphql");
const constants_1 = require("../../../../constants");
const scalars_1 = require("../../../../graphql/scalars");
const LocalTime_1 = require("../../../../graphql/scalars/LocalTime");
const Time_1 = require("../../../../graphql/scalars/Time");
const document_validation_error_1 = require("../utils/document-validation-error");
const same_type_argument_as_field_1 = require("../utils/same-type-argument-as-field");
const utils_1 = require("../utils/utils");
// TODO: schema-generation: save enums as map
function verifyDefault(enums) {
    return function ({ directiveNode, traversedDef, }) {
        if (traversedDef.kind !== graphql_1.Kind.FIELD_DEFINITION) {
            // delegate
            return;
        }
        const defaultArg = directiveNode.arguments?.find((a) => a.name.value === "value");
        const expectedType = (0, utils_1.getInnerTypeName)(traversedDef.type);
        if (!defaultArg) {
            // delegate to DirectiveArgumentOfCorrectType rule
            return;
        }
        if (!(0, utils_1.isArrayType)(traversedDef)) {
            if ([scalars_1.GraphQLDateTime.name, scalars_1.GraphQLLocalDateTime.name, scalars_1.GraphQLDate.name].includes(expectedType)) {
                if (Number.isNaN(Date.parse((defaultArg?.value).value))) {
                    throw new document_validation_error_1.DocumentValidationError(`@default.${defaultArg.name.value} is not a valid ${expectedType}`, ["value"]);
                }
            }
            else if (expectedType === Time_1.GraphQLTime.name) {
                try {
                    (0, Time_1.parseTime)((defaultArg?.value).value);
                }
                catch {
                    throw new document_validation_error_1.DocumentValidationError(`@default.${defaultArg.name.value} is not a valid ${expectedType}`, ["value"]);
                }
            }
            else if (expectedType === LocalTime_1.GraphQLLocalTime.name) {
                try {
                    (0, LocalTime_1.parseLocalTime)((defaultArg?.value).value);
                }
                catch {
                    throw new document_validation_error_1.DocumentValidationError(`@default.${defaultArg.name.value} is not a valid ${expectedType}`, ["value"]);
                }
            }
            else if (!constants_1.GRAPHQL_BUILTIN_SCALAR_TYPES.includes(expectedType) &&
                !enums.some((x) => x.name.value === expectedType) &&
                expectedType !== "BigInt") {
                throw new document_validation_error_1.DocumentValidationError(`@default directive can only be used on fields of type Int, Float, String, Boolean, ID, BigInt, DateTime, Date, Time, LocalDateTime or LocalTime.`, []);
            }
        }
        (0, same_type_argument_as_field_1.assertArgumentHasSameTypeAsField)({ directiveName: "@default", traversedDef, argument: defaultArg, enums });
    };
}
//# sourceMappingURL=default.js.map